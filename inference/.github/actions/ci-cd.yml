name: Build and Push to GKE verba backend

on:
  push:
    branches:
      - main

env:
  TAG: gcr.io/tavishi-gcp-docker/ml_pipeline:${{ github.sha }}

jobs:
  continuous-integration:
    name: Setup, Build, and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set_path
        run: |
          export CLOUDSDK_PYTHON=/usr/bin/python

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login and push to OCI docker registry
        run: |
          docker login -u oauth2accesstoken -p ${{ secrets.TOKEN }} https://gcr.io
          docker build -t fastapi_server:${{ github.sha }} .
          docker tag fastapi_server:${{ github.sha }} "${{ env.TAG }}"
          docker push "${{ env.TAG }}"

  continuous_deployment:
    name: continuous delivery to GKE cluster
    runs-on: ubuntu-latest
    needs: continuous-integration
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - id: 'get-credentials'
        uses: 'google-github-actions/get-gke-credentials@v2'
        with:
          cluster_name: 'tavishi-sap-cluster-1'
          location: 'us-central1-c'

      - name: "install kubernetes"
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Deploy
        run: |
          sed 's|hyd\.ocir\.io\.docker|hyd.ocir.io/axbnvq6zalfd/fastapi_server:${{ github.sha }} |g' k8s/deploy.yml > k8s/deploy-temp.yml
          rm -rf k8s/fastapi_server.yml
          mv k8s/fastapi_server-temp.yml k8s/fastapi_server.yml
          kubectl apply -f k8s -n server